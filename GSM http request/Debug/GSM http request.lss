
GSM http request.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  000001ac  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a61  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000394  00000000  00000000  000015a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000446  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002a6  00000000  00000000  00001dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002094  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ea       	ldi	r30, 0xAC	; 172
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 31       	cpi	r26, 0x1C	; 28
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8e:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z14USART_Transmith>:
	while ( !(UCSR0A & (1<<RXC0)) );

		/* Get and return received data from buffer */
		return UDR0;

}
  96:	e0 ec       	ldi	r30, 0xC0	; 192
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	90 81       	ld	r25, Z
  9c:	95 ff       	sbrs	r25, 5
  9e:	fd cf       	rjmp	.-6      	; 0x9a <_Z14USART_Transmith+0x4>
  a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  a4:	08 95       	ret

000000a6 <_Z11Send_StringPc>:

#include <avr/io.h>
#include "USART.h"
#include <util/delay.h>

void Send_String(char ar[]){
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	int i;
	i=0;
	while(ar[i]!='\0'){
  ac:	88 81       	ld	r24, Y
  ae:	88 23       	and	r24, r24
  b0:	31 f0       	breq	.+12     	; 0xbe <_Z11Send_StringPc+0x18>
  b2:	21 96       	adiw	r28, 0x01	; 1
		USART_Transmit(ar[i]);
  b4:	0e 94 4b 00 	call	0x96	; 0x96 <_Z14USART_Transmith>
#include <util/delay.h>

void Send_String(char ar[]){
	int i;
	i=0;
	while(ar[i]!='\0'){
  b8:	89 91       	ld	r24, Y+
  ba:	81 11       	cpse	r24, r1
  bc:	fb cf       	rjmp	.-10     	; 0xb4 <_Z11Send_StringPc+0xe>
		USART_Transmit(ar[i]);
		i++;
	}
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:

int main(void)
{
		Send_String("AT+SAPBR=3,1,\"Contype\",\"GPRS\"\r\n");		//set connection type to GPRS
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	91 e0       	ldi	r25, 0x01	; 1
  c8:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	84 e3       	ldi	r24, 0x34	; 52
  d0:	9c e0       	ldi	r25, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0xe>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x18>
  dc:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+SAPBR=3,1,\"APN\",\"www\"\r\n");		//set APN
  de:	80 e2       	ldi	r24, 0x20	; 32
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
  e6:	2f ef       	ldi	r18, 0xFF	; 255
  e8:	84 e3       	ldi	r24, 0x34	; 52
  ea:	9c e0       	ldi	r25, 0x0C	; 12
  ec:	21 50       	subi	r18, 0x01	; 1
  ee:	80 40       	sbci	r24, 0x00	; 0
  f0:	90 40       	sbci	r25, 0x00	; 0
  f2:	e1 f7       	brne	.-8      	; 0xec <main+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <main+0x32>
  f6:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+SAPBR =1,1\r\n");		//enable the GPRS
  f8:	8b e3       	ldi	r24, 0x3B	; 59
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 100:	2f ef       	ldi	r18, 0xFF	; 255
 102:	89 e6       	ldi	r24, 0x69	; 105
 104:	98 e1       	ldi	r25, 0x18	; 24
 106:	21 50       	subi	r18, 0x01	; 1
 108:	80 40       	sbci	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	e1 f7       	brne	.-8      	; 0x106 <main+0x42>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x4c>
 110:	00 00       	nop
 112:	2f ef       	ldi	r18, 0xFF	; 255
 114:	81 e1       	ldi	r24, 0x11	; 17
 116:	9a e7       	ldi	r25, 0x7A	; 122
 118:	21 50       	subi	r18, 0x01	; 1
 11a:	80 40       	sbci	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	e1 f7       	brne	.-8      	; 0x118 <main+0x54>
 120:	00 c0       	rjmp	.+0      	; 0x122 <main+0x5e>
 122:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {	_delay_ms(5000);
		
		Send_String("AT+HTTPINIT\r\n");		//init http service
 124:	8b e4       	ldi	r24, 0x4B	; 75
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	84 e3       	ldi	r24, 0x34	; 52
 130:	9c e0       	ldi	r25, 0x0C	; 12
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x6e>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x78>
 13c:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+HTTPPARA=\"CID\",1\r\n");			//set http session
 13e:	89 e5       	ldi	r24, 0x59	; 89
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	84 e3       	ldi	r24, 0x34	; 52
 14a:	9c e0       	ldi	r25, 0x0C	; 12
 14c:	21 50       	subi	r18, 0x01	; 1
 14e:	80 40       	sbci	r24, 0x00	; 0
 150:	90 40       	sbci	r25, 0x00	; 0
 152:	e1 f7       	brne	.-8      	; 0x14c <main+0x88>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0x92>
 156:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+HTTPPARA=\"URL\",\"http://goorm-test-container-prses.run.goorm.io/location/GPRMC,075054.691,A,5301.680,N,00853.936,E,,,220719,000.0,W*73\"\r\n");			//set http url
 158:	8f e6       	ldi	r24, 0x6F	; 111
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 160:	2f ef       	ldi	r18, 0xFF	; 255
 162:	84 e3       	ldi	r24, 0x34	; 52
 164:	9c e0       	ldi	r25, 0x0C	; 12
 166:	21 50       	subi	r18, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0xa2>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0xac>
 170:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+HTTPACTION=0\r\n");			//return 200 if successful
 172:	8b ef       	ldi	r24, 0xFB	; 251
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 17a:	2f ef       	ldi	r18, 0xFF	; 255
 17c:	84 e3       	ldi	r24, 0x34	; 52
 17e:	9c e0       	ldi	r25, 0x0C	; 12
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0xbc>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0xc6>
 18a:	00 00       	nop
		_delay_ms(500);
		
		Send_String("AT+HTTPTERM\r\n");			//Stop http service
 18c:	8d e0       	ldi	r24, 0x0D	; 13
 18e:	92 e0       	ldi	r25, 0x02	; 2
 190:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11Send_StringPc>
 194:	2f ef       	ldi	r18, 0xFF	; 255
 196:	84 e3       	ldi	r24, 0x34	; 52
 198:	9c e0       	ldi	r25, 0x0C	; 12
 19a:	21 50       	subi	r18, 0x01	; 1
 19c:	80 40       	sbci	r24, 0x00	; 0
 19e:	90 40       	sbci	r25, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <main+0xd6>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <main+0xe0>
 1a4:	00 00       	nop
 1a6:	b5 cf       	rjmp	.-150    	; 0x112 <main+0x4e>

000001a8 <_exit>:
 1a8:	f8 94       	cli

000001aa <__stop_program>:
 1aa:	ff cf       	rjmp	.-2      	; 0x1aa <__stop_program>
